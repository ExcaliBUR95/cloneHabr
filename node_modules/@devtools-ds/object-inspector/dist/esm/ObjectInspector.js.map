{"version":3,"names":["React","useEffect","useState","makeClass","parse","useTheme","ThemeProvider","ObjectInspectorItem","styles","ObjectInspector","props","data","expandLevel","sortKeys","includePrototypes","className","theme","colorScheme","onSelect","html","ast","setAST","undefined","themeClass","currentTheme","currentColorScheme","runParser","objectInspector","defaultProps"],"sources":["ObjectInspector.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport makeClass from \"clsx\";\nimport {\n  parse,\n  SupportedTypes,\n  ASTNode,\n  ResolvedASTNode,\n} from \"@devtools-ds/object-parser\";\nimport { ThemeableElement, useTheme, ThemeProvider } from \"@devtools-ds/themes\";\nimport ObjectInspectorItem from \"./ObjectInspectorItem\";\n\nimport styles from \"./ObjectInspector.css\";\n\ninterface ObjectInspectorProps\n  extends Omit<ThemeableElement<\"div\">, \"onSelect\"> {\n  /** JSON data to render in the tree. */\n  data: SupportedTypes;\n  /** Depth of the tree that is open at first render. */\n  expandLevel: number;\n  /** Whether to sort keys like the browsers do. */\n  sortKeys: boolean;\n  /** Whether to include object Prototypes */\n  includePrototypes: boolean;\n  /** Callback when a particular node in the tree is actively selected */\n  onSelect?: (node?: ASTNode | ResolvedASTNode) => void;\n}\n\n/** An emulation of browsers JSON object inspector. */\nexport const ObjectInspector = (props: ObjectInspectorProps) => {\n  const {\n    data,\n    expandLevel,\n    sortKeys,\n    includePrototypes,\n    className,\n    theme,\n    colorScheme,\n    onSelect,\n    ...html\n  } = props;\n  const [ast, setAST] = useState<ASTNode | undefined>(undefined);\n  const { themeClass, currentTheme, currentColorScheme } = useTheme(\n    { theme, colorScheme },\n    styles\n  );\n\n  /** Handle async types */\n  useEffect(() => {\n    /** Async function run the parser */\n    const runParser = async () => {\n      setAST(await parse(data, sortKeys, includePrototypes));\n    };\n\n    runParser();\n  }, [data, sortKeys, includePrototypes]);\n\n  return (\n    <div\n      className={makeClass(styles.objectInspector, className, themeClass)}\n      {...html}\n    >\n      {ast && (\n        <ThemeProvider theme={currentTheme} colorScheme={currentColorScheme}>\n          <ObjectInspectorItem\n            ast={ast}\n            expandLevel={expandLevel}\n            onSelect={onSelect}\n          />\n        </ThemeProvider>\n      )}\n    </div>\n  );\n};\n\nObjectInspector.defaultProps = {\n  expandLevel: 0,\n  sortKeys: true,\n  includePrototypes: true,\n};\n\nexport default ObjectInspector;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,MAAM;AAC5B,SACEC,KAAK,QAIA,4BAA4B;AACnC,SAA2BC,QAAQ,EAAEC,aAAa,QAAQ,qBAAqB;AAC/E,OAAOC,mBAAmB,MAAM,uBAAuB;AAEvD,OAAOC,MAAM,MAAM,uBAAuB;AAgB1C;AACA,OAAO,MAAMC,eAAe,GAAIC,KAA2B,IAAK;EAC9D,MAAM;MACJC,IAAI;MACJC,WAAW;MACXC,QAAQ;MACRC,iBAAiB;MACjBC,SAAS;MACTC,KAAK;MACLC,WAAW;MACXC;IAEF,CAAC,GAAGR,KAAK;IADJS,IAAI,4BACLT,KAAK;EACT,MAAM,CAACU,GAAG,EAAEC,MAAM,CAAC,GAAGnB,QAAQ,CAAsBoB,SAAS,CAAC;EAC9D,MAAM;IAAEC,UAAU;IAAEC,YAAY;IAAEC;EAAmB,CAAC,GAAGpB,QAAQ,CAC/D;IAAEW,KAAK;IAAEC;EAAY,CAAC,EACtBT,MAAM,CACP;;EAED;EACAP,SAAS,CAAC,MAAM;IACd;IACA,MAAMyB,SAAS,GAAG,YAAY;MAC5BL,MAAM,CAAC,MAAMjB,KAAK,CAACO,IAAI,EAAEE,QAAQ,EAAEC,iBAAiB,CAAC,CAAC;IACxD,CAAC;IAEDY,SAAS,EAAE;EACb,CAAC,EAAE,CAACf,IAAI,EAAEE,QAAQ,EAAEC,iBAAiB,CAAC,CAAC;EAEvC,oBACE;IACE,SAAS,EAAEX,SAAS,CAACK,MAAM,CAACmB,eAAe,EAAEZ,SAAS,EAAEQ,UAAU;EAAE,GAChEJ,IAAI,GAEPC,GAAG,iBACF,oBAAC,aAAa;IAAC,KAAK,EAAEI,YAAa;IAAC,WAAW,EAAEC;EAAmB,gBAClE,oBAAC,mBAAmB;IAClB,GAAG,EAAEL,GAAI;IACT,WAAW,EAAER,WAAY;IACzB,QAAQ,EAAEM;EAAS,EACnB,CAEL,CACG;AAEV,CAAC;AAEDT,eAAe,CAACmB,YAAY,GAAG;EAC7BhB,WAAW,EAAE,CAAC;EACdC,QAAQ,EAAE,IAAI;EACdC,iBAAiB,EAAE;AACrB,CAAC;AAED,eAAeL,eAAe"}
