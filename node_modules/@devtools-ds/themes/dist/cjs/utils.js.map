{"version":3,"names":["colorSchemes","themes","isWindowDefined","window","ThemeContext","React","createContext","theme","colorScheme","useDarkMode","darkMode","setDarkMode","useState","matchMedia","matches","useEffect","mediaQuery","changeDarkMode","addListener","removeListener","ThemeProvider","children","value","wrappedTheme","useContext","useTheme","props","styles","themeContext","currentTheme","currentColorScheme","themeClass","makeClass"],"sources":["utils.tsx"],"sourcesContent":["import React from \"react\";\nimport makeClass from \"clsx\";\nimport { Element } from \"@design-systems/utils\";\n\nexport const colorSchemes = [\"light\", \"dark\"] as const;\nexport type ColorScheme = typeof colorSchemes[number];\n\nexport const themes = [\"chrome\", \"firefox\"] as const;\nexport type Theme = typeof themes[number];\n\nconst isWindowDefined = typeof window !== \"undefined\";\n\n/**\n * Get all of the props for an HTML element + add the theme props.\n * Used to easily type the rest props of a component and add theming.\n *\n * @example\n * export interface ButtonProps extends ThemeableElement<'button'> {\n *   size?: Sizes;\n * }\n */\nexport interface Themeable {\n  /** Light or Dark mode. */\n  colorScheme?: ColorScheme;\n  /** Supported browser themes.  */\n  theme?: Theme;\n}\n\nexport type ThemeableElement<T extends keyof JSX.IntrinsicElements> = Element<\n  T\n> &\n  Themeable;\n\nexport const ThemeContext = React.createContext<Themeable>({\n  theme: \"chrome\",\n  colorScheme: \"light\",\n});\n\n/**\n * Determine if the user has a \"prefers-color-scheme\" mode enabled in their browser.\n * This is helpful for detecting if a user prefers dark mode.\n */\nexport const useDarkMode = () => {\n  const [darkMode, setDarkMode] = React.useState(\n    isWindowDefined && window\n      ? window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n      : false\n  );\n\n  React.useEffect(() => {\n    if (!isWindowDefined) {\n      return;\n    }\n\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n    /** Run when the user changes this setting. */\n    const changeDarkMode = () => setDarkMode(!darkMode);\n\n    mediaQuery.addListener(changeDarkMode);\n\n    return () => {\n      mediaQuery.removeListener(changeDarkMode);\n    };\n  }, [darkMode]);\n\n  return darkMode;\n};\n\n/** A React Context provider for devtools-ds themes */\nexport const ThemeProvider = ({\n  children,\n  ...value\n}: React.PropsWithChildren<Themeable>) => {\n  const wrappedTheme = React.useContext(ThemeContext);\n\n  return (\n    <ThemeContext.Provider value={{ ...wrappedTheme, ...value }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n/**\n * A hook to use the closest theme context.\n *\n * @param props - Current component props\n * @param styles - The css modules for the component\n *\n * @example\n * const { themeClass } = useTheme({ colorScheme, theme }, styles);\n */\nexport const useTheme = (\n  props: Themeable,\n  styles: Record<string, string> = {}\n) => {\n  const themeContext = React.useContext(ThemeContext);\n\n  const currentTheme = props.theme || themeContext.theme || \"chrome\";\n  const currentColorScheme =\n    props.colorScheme || themeContext.colorScheme || \"light\";\n  const themeClass = makeClass(\n    styles[currentTheme],\n    styles[currentColorScheme]\n  );\n\n  return {\n    currentColorScheme,\n    currentTheme,\n    themeClass,\n  };\n};\n\ninterface BasicTheme {\n  [key: string]: string;\n}\n\ninterface LightDarkTheme {\n  /** The light version of the theme */\n  light: BasicTheme;\n  /** The dark version of the theme */\n  dark: BasicTheme;\n}\n\ntype CustomTheme = BasicTheme | LightDarkTheme;\n\nexport type ComponentTheme = Required<Record<\"chrome\", CustomTheme>> &\n  Partial<Record<Theme, CustomTheme>>;\n"],"mappings":";;;;;;;;;AAAA;AACA;AAA6B;AAGtB,MAAMA,YAAY,GAAG,CAAC,OAAO,EAAE,MAAM,CAAU;AAAC;AAGhD,MAAMC,MAAM,GAAG,CAAC,QAAQ,EAAE,SAAS,CAAU;AAAC;AAGrD,MAAMC,eAAe,GAAG,OAAOC,MAAM,KAAK,WAAW;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAaO,MAAMC,YAAY,gBAAGC,cAAK,CAACC,aAAa,CAAY;EACzDC,KAAK,EAAE,QAAQ;EACfC,WAAW,EAAE;AACf,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AAHA;AAIO,MAAMC,WAAW,GAAG,MAAM;EAC/B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,cAAK,CAACO,QAAQ,CAC5CV,eAAe,IAAIC,MAAM,GACrBA,MAAM,CAACU,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,GACzD,KAAK,CACV;EAEDT,cAAK,CAACU,SAAS,CAAC,MAAM;IACpB,IAAI,CAACb,eAAe,EAAE;MACpB;IACF;IAEA,MAAMc,UAAU,GAAGb,MAAM,CAACU,UAAU,CAAC,8BAA8B,CAAC;;IAEpE;IACA,MAAMI,cAAc,GAAG,MAAMN,WAAW,CAAC,CAACD,QAAQ,CAAC;IAEnDM,UAAU,CAACE,WAAW,CAACD,cAAc,CAAC;IAEtC,OAAO,MAAM;MACXD,UAAU,CAACG,cAAc,CAACF,cAAc,CAAC;IAC3C,CAAC;EACH,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EAEd,OAAOA,QAAQ;AACjB,CAAC;;AAED;AAAA;AACO,MAAMU,aAAa,GAAG,QAGa;EAAA,IAHZ;MAC5BC;IAEkC,CAAC;IADhCC,KAAK;EAER,MAAMC,YAAY,GAAGlB,cAAK,CAACmB,UAAU,CAACpB,YAAY,CAAC;EAEnD,oBACE,6BAAC,YAAY,CAAC,QAAQ;IAAC,KAAK,8DAAOmB,YAAY,GAAKD,KAAK;EAAG,GACzDD,QAAQ,CACa;AAE5B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AASO,MAAMI,QAAQ,GAAG,CACtBC,KAAgB,EAChBC,MAA8B,GAAG,CAAC,CAAC,KAChC;EACH,MAAMC,YAAY,GAAGvB,cAAK,CAACmB,UAAU,CAACpB,YAAY,CAAC;EAEnD,MAAMyB,YAAY,GAAGH,KAAK,CAACnB,KAAK,IAAIqB,YAAY,CAACrB,KAAK,IAAI,QAAQ;EAClE,MAAMuB,kBAAkB,GACtBJ,KAAK,CAAClB,WAAW,IAAIoB,YAAY,CAACpB,WAAW,IAAI,OAAO;EAC1D,MAAMuB,UAAU,GAAG,IAAAC,aAAS,EAC1BL,MAAM,CAACE,YAAY,CAAC,EACpBF,MAAM,CAACG,kBAAkB,CAAC,CAC3B;EAED,OAAO;IACLA,kBAAkB;IAClBD,YAAY;IACZE;EACF,CAAC;AACH,CAAC;AAAC"}
