{"version":3,"names":["isArray","val","Array","ArrayBuffer","isView","DataView","isObject","Date","RegExp","Error","WeakMap","WeakSet","isKnownObject","Promise","getPromiseState","promise","unique","race","then","result","e","buildAST","key","value","depth","sortKeys","isPrototype","showPrototype","astNode","type","parent","undefined","children","t","i","length","push","child","toString","keys","Object","getOwnPropertyNames","sort","safeValue","status","Map","entries","from","parsedEntries","map","entry","entryKey","entryValue","size","Set","prototype","getPrototypeOf","parse","data","includePrototypes","prototypes"],"sources":["index.ts"],"sourcesContent":["export interface AST {\n  /** Current object key */\n  key: string;\n  /** Current depth */\n  depth: number;\n\n  /** The parent node of the current one */\n  parent: AST | undefined;\n}\n\ninterface ASTChildren {\n  /** Children */\n  children: DeferredNode[];\n  /** Whether it's an Object prototype */\n  isPrototype?: true;\n}\n\n/** A type to describe objects with all deferred children loaded */\ninterface ASTResolvedChildren {\n  /** Children */\n  children: ASTNode[];\n  /** Whether it's an Object prototype */\n  isPrototype?: true;\n}\n\nexport type DeferredNode = () => Promise<ASTNode>;\n\n// Object\nexport interface ASTObject extends AST, ASTChildren {\n  /** Type */\n  type: \"object\";\n  /** Value */\n  value: object;\n}\n\nexport interface ResolvedASTObject extends AST, ASTResolvedChildren {\n  /** Type */\n  type: \"object\";\n  /** Value */\n  value: object;\n}\n\n// Array\nexport interface ASTArray extends AST, ASTChildren {\n  /** Type */\n  type: \"array\";\n  /** Value */\n  value: any[];\n}\n\nexport interface ResolvedASTArray extends AST, ASTResolvedChildren {\n  /** Type */\n  type: \"array\";\n  /** Value */\n  value: any[];\n}\n\n// Function\nexport interface ASTFunction extends AST, ASTChildren {\n  /** Type */\n  type: \"function\";\n  /** Value */\n  value: Function;\n}\n\nexport interface ResolvedASTFunction extends AST, ASTResolvedChildren {\n  /** Type */\n  type: \"function\";\n  /** Value */\n  value: Function;\n}\n\n// Promise\nexport type PromiseState = \"pending\" | \"fulfilled\" | \"rejected\";\n\nexport interface ASTPromise extends AST, ASTChildren {\n  /** Type */\n  type: \"promise\";\n  /** Value */\n  value: Promise<any>;\n}\n\nexport interface ResolvedASTPromise extends AST, ASTResolvedChildren {\n  /** Type */\n  type: \"promise\";\n  /** Value */\n  value: Promise<any>;\n}\n\n// Map\nexport interface ASTMap extends AST, ASTChildren {\n  /** Type */\n  type: \"map\";\n  /** Value */\n  value: Map<any, any>;\n}\n\nexport interface ResolvedASTMap extends AST, ASTResolvedChildren {\n  /** Type */\n  type: \"map\";\n  /** Value */\n  value: Map<any, any>;\n}\n\n// Set\nexport interface ASTSet extends AST, ASTChildren {\n  /** Type */\n  type: \"set\";\n  /** Value */\n  value: Set<any>;\n}\n\n//\nexport interface ResolvedASTSet extends AST, ASTResolvedChildren {\n  /** Type */\n  type: \"set\";\n  /** Value */\n  value: Set<any>;\n}\n\n// Leaf Values\nexport interface ASTValue extends AST {\n  /** Type */\n  type: \"value\";\n  /** Value */\n  value:\n    | boolean\n    | null\n    | number\n    | BigInt\n    | string\n    | symbol\n    | undefined\n    | Date\n    | RegExp\n    | Error\n    | WeakMap<any, any>\n    | WeakSet<any>\n    | Promise<any>;\n  /** It's not a prototype */\n  isPrototype?: false;\n}\n\nexport type SupportedTypes =\n  | boolean\n  | null\n  | number\n  | string\n  | Error\n  | symbol\n  | undefined\n  | Date\n  | RegExp\n  | object\n  | Map<any, any>\n  | WeakMap<any, any>\n  | Set<any>\n  | WeakSet<any>\n  | Promise<any>\n  | any[]\n  | Function;\n\nexport type ObjectTypes =\n  | \"object\"\n  | \"function\"\n  | \"array\"\n  | \"promise\"\n  | \"map\"\n  | \"set\";\n\nexport type ASTNode =\n  | ASTObject\n  | ASTArray\n  | ASTFunction\n  | ASTPromise\n  | ASTMap\n  | ASTSet\n  | ASTValue;\n\nexport type ResolvedASTNode =\n  | ResolvedASTObject\n  | ResolvedASTArray\n  | ResolvedASTFunction\n  | ResolvedASTPromise\n  | ResolvedASTMap\n  | ResolvedASTSet;\n\n/**\n * Determine if the current object is an array.\n */\nconst isArray = (val: object): boolean => {\n  return (\n    Array.isArray(val) ||\n    // Detect https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\n    (ArrayBuffer.isView(val) && !(val instanceof DataView))\n  );\n};\n\n/**\n * Determine if a given value is a true javascript object.\n * Ignore Objects that we know how to display as values.\n *\n * @param val - The current object\n */\nexport const isObject = (val: object): boolean => {\n  return (\n    val !== null &&\n    typeof val === \"object\" &&\n    !isArray(val) &&\n    !(val instanceof Date) &&\n    !(val instanceof RegExp) &&\n    !(val instanceof Error) &&\n    !(val instanceof WeakMap) &&\n    !(val instanceof WeakSet)\n  );\n};\n\n/** Check for objects we know how to enumerate */\nexport const isKnownObject = (val: object): boolean => {\n  return (\n    isObject(val) ||\n    isArray(val) ||\n    typeof val === \"function\" ||\n    val instanceof Promise\n  );\n};\n\n/**\n * Get the current state of a promise, and return a result if fulfilled\n *\n * @param promise - A promise to inspect\n */\nexport const getPromiseState = (\n  promise: Promise<any>\n): Promise<[\"pending\"] | [\"rejected\", any] | [\"fulfilled\", any]> => {\n  // Symbols and RegExps are never content-equal\n  const unique = /unique/;\n\n  return Promise.race([promise, unique]).then(\n    (result) => (result === unique ? [\"pending\"] : [\"fulfilled\", result]),\n    (e) => [\"rejected\", e]\n  );\n};\n\n/**\n * Build the AST recursively\n *\n * @param key - Current node key\n * @param value - Current node value\n * @param depth - Current tree depth\n * @param sortKeys - Whether to sort the keys\n */\nconst buildAST = async (\n  key: string,\n  value: any,\n  depth: number,\n  sortKeys: boolean,\n  isPrototype?: true,\n  showPrototype?: boolean\n): Promise<ASTNode> => {\n  const astNode = {\n    key,\n    depth,\n    value,\n    type: \"value\",\n    parent: undefined,\n  };\n\n  if (value && isKnownObject(value) && depth < 100) {\n    const children = [];\n    let t: ObjectTypes = \"object\";\n\n    // Build Array\n    if (isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        children.push(async () => {\n          const child = await buildAST(\n            i.toString(),\n            value[i],\n            depth + 1,\n            sortKeys\n          );\n          child.parent = astNode;\n          return child;\n        });\n      }\n\n      t = \"array\";\n    } else {\n      // Get Object Properties\n      const keys = Object.getOwnPropertyNames(value);\n      if (sortKeys) keys.sort();\n      for (let i = 0; i < keys.length; i++) {\n        let safeValue: any;\n        try {\n          safeValue = value[keys[i]];\n        } catch (e) {}\n\n        children.push(async () => {\n          const child = await buildAST(keys[i], safeValue, depth + 1, sortKeys);\n          child.parent = astNode;\n          return child;\n        });\n      }\n\n      // Change Type for Function\n      if (typeof value === \"function\") {\n        t = \"function\";\n      }\n\n      // Handle Promises\n      if (value instanceof Promise) {\n        const [status, result] = await getPromiseState(value);\n        children.push(async () => {\n          const child = await buildAST(\"<state>\", status, depth + 1, sortKeys);\n          child.parent = astNode;\n          return child;\n        });\n        if (status !== \"pending\") {\n          children.push(async () => {\n            const child = await buildAST(\n              \"<value>\",\n              result,\n              depth + 1,\n              sortKeys\n            );\n            child.parent = astNode;\n            return child;\n          });\n        }\n\n        t = \"promise\";\n      }\n\n      // Handle Maps\n      if (value instanceof Map) {\n        const entries = Array.from(value.entries());\n        const parsedEntries = entries.map((entry) => {\n          const [entryKey, entryValue] = entry;\n          return {\n            \"<key>\": entryKey,\n            \"<value>\": entryValue,\n          };\n        });\n        children.push(async () => {\n          const child = await buildAST(\n            \"<entries>\",\n            parsedEntries,\n            depth + 1,\n            sortKeys\n          );\n          child.parent = astNode;\n          return child;\n        });\n        children.push(async () => {\n          const child = await buildAST(\"size\", value.size, depth + 1, sortKeys);\n          child.parent = astNode;\n          return child;\n        });\n        t = \"map\";\n      }\n\n      // Handle Sets\n      if (value instanceof Set) {\n        const entries = Array.from(value.entries());\n        const parsedEntries = entries.map((entry) => {\n          return entry[1];\n        });\n        children.push(async () => {\n          const child = await buildAST(\n            \"<entries>\",\n            parsedEntries,\n            depth + 1,\n            sortKeys\n          );\n          child.parent = astNode;\n          return child;\n        });\n        children.push(async () => {\n          const child = await buildAST(\"size\", value.size, depth + 1, sortKeys);\n          child.parent = astNode;\n          return child;\n        });\n        t = \"set\";\n      }\n    }\n\n    // Handle Object Prototypes\n    if (value !== Object.prototype && showPrototype) {\n      children.push(async () => {\n        const child = await buildAST(\n          \"<prototype>\",\n          Object.getPrototypeOf(value),\n          depth + 1,\n          sortKeys,\n          true\n        );\n        child.parent = astNode;\n        return child;\n      });\n    }\n\n    astNode.type = t;\n    ((astNode as any) as ASTChildren).children = children;\n    ((astNode as any) as ASTChildren).isPrototype = isPrototype;\n  }\n\n  return astNode as ASTNode;\n};\n\n/**\n * Parse an object in to an AST.\n *\n * @param data - Object to parse.\n */\nexport const parse = (\n  data: SupportedTypes,\n  sortKeys?: boolean,\n  includePrototypes?: boolean\n) => {\n  const keys = sortKeys === false ? sortKeys : true;\n  const prototypes = includePrototypes === false ? includePrototypes : true;\n  return buildAST(\"root\", data, 0, keys, undefined, prototypes);\n};\n\nexport default parse;\n"],"mappings":"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"}
