{"version":3,"names":["Tree","props","theme","hover","colorScheme","children","label","className","onUpdate","onSelect","open","html","themeClass","currentTheme","useTheme","styles","isOpen","setOpen","useState","useEffect","updateState","value","hasChildren","React","Children","count","updateFocus","newNode","previousNode","isSameNode","focusableNode","querySelector","focus","setAttribute","removeAttribute","getParent","node","role","parent","parentElement","getAttribute","getListElements","tree","Array","from","querySelectorAll","moveBack","group","toggle","previousElementSibling","toggleParent","nodeParent","moveHome","direction","elements","forEach","element","length","moveFocusAdjacent","i","currentNode","handleKeypress","event","isChild","target","key","handleClick","found","handleBlur","currentTarget","contains","document","activeElement","handleFocus","selected","handleButtonFocus","getPaddingStyles","depth","space","paddingLeft","width","hasHover","useContext","TreeContext","showHover","makeClass","item","focusWhite","e","arrowClass","arrow","map","child","defaultProps"],"sources":["index.tsx"],"sourcesContent":["import React, { ReactNode, useState, useEffect } from \"react\";\nimport { ThemeableElement, useTheme } from \"@devtools-ds/themes\";\nimport makeClass from \"clsx\";\nimport TreeContext from \"./TreeContext\";\nimport styles from \"./Tree.css\";\n\nexport interface TreeProps extends ThemeableElement<\"ul\"> {\n  /** The label for this node */\n  label: string | ReactNode;\n  /** Whether this node is open */\n  open: boolean;\n  /** Whether to add hover styles to children */\n  hover: boolean;\n  /** Send state updates so parent can track them */\n  onUpdate?: (value: boolean) => void;\n  /**\n   * Called when the given node is selected/focused\n   * For nodes w/ children, this is equivalent to them updating their state\n   */\n  onSelect?: () => void;\n}\n\n/** A keyboard accessible expanding tree view. */\nexport const Tree = (props: TreeProps) => {\n  const {\n    theme,\n    hover,\n    colorScheme,\n    children,\n    label,\n    className,\n    onUpdate,\n    onSelect,\n    open,\n    ...html\n  } = props;\n\n  const { themeClass, currentTheme } = useTheme({ theme, colorScheme }, styles);\n\n  const [isOpen, setOpen] = useState(open);\n  // For some reason the useState above default doesn't work, so useEffect is needed\n  useEffect(() => {\n    setOpen(open);\n  }, [open]);\n\n  /** Update state and call callback */\n  const updateState = (value: boolean) => {\n    setOpen(value);\n    if (onUpdate) onUpdate(value);\n  };\n\n  const hasChildren = React.Children.count(children) > 0;\n\n  /** Set focus and aria-selected onto a new <li>, unselect old if provided */\n  const updateFocus = (\n    newNode: HTMLLIElement,\n    previousNode?: HTMLLIElement\n  ) => {\n    if (newNode.isSameNode(previousNode || null)) return;\n    const focusableNode = newNode.querySelector<HTMLLIElement>(\n      '[tabindex=\"-1\"]'\n    );\n    focusableNode?.focus();\n    newNode.setAttribute(\"aria-selected\", \"true\");\n    previousNode?.removeAttribute(\"aria-selected\");\n  };\n\n  /**\n   * Find a parent DOM node with a given role.\n   *\n   * @param node - Current HTMLElement\n   */\n  const getParent = (\n    node: HTMLElement,\n    role: \"tree\" | \"group\" | \"treeitem\"\n  ) => {\n    let parent = node;\n    while (parent && parent.parentElement) {\n      // Find the top of the tree\n      if (parent.getAttribute(\"role\") === role) {\n        return parent;\n      }\n\n      // Move up the tree after, in case the node provided is the tree\n      parent = parent.parentElement;\n    }\n\n    return null;\n  };\n\n  /** Get all list elements for the current tree. */\n  const getListElements = (node: HTMLElement) => {\n    const tree = getParent(node, \"tree\");\n    if (!tree) return [];\n    return Array.from(tree.querySelectorAll<HTMLLIElement>(\"li\"));\n  };\n\n  /** Move focus up to the tree node above */\n  const moveBack = (node: HTMLElement) => {\n    const group = getParent(node, \"group\");\n    const toggle = group?.previousElementSibling;\n\n    if (toggle && toggle.getAttribute(\"tabindex\") === \"-1\") {\n      const toggleParent = toggle.parentElement as HTMLLIElement;\n      const nodeParent = node.parentElement as HTMLLIElement;\n      updateFocus(toggleParent, nodeParent);\n    }\n  };\n\n  /** Move the focus to the start or end of the tree */\n  const moveHome = (node: HTMLElement, direction: \"start\" | \"end\") => {\n    const elements = getListElements(node);\n    elements.forEach((element) => {\n      element.removeAttribute(\"aria-selected\");\n    });\n    if (direction === \"start\" && elements[0]) {\n      updateFocus(elements[0]);\n    }\n\n    if (direction === \"end\" && elements[elements.length - 1]) {\n      updateFocus(elements[elements.length - 1]);\n    }\n  };\n\n  /** Move focus up or down a level from the provided Element */\n  const moveFocusAdjacent = (node: HTMLElement, direction: \"up\" | \"down\") => {\n    const elements = getListElements(node) || [];\n    for (let i = 0; i < elements.length; i++) {\n      // Go through each <li> and look for the currently selected node\n      const currentNode = elements[i];\n      if (currentNode.getAttribute(\"aria-selected\") === \"true\") {\n        if (direction === \"up\" && elements[i - 1]) {\n          // Move focus to the <li> above\n          updateFocus(elements[i - 1], currentNode);\n        } else if (direction === \"down\" && elements[i + 1]) {\n          // Move focus to the <li> below\n          updateFocus(elements[i + 1], currentNode);\n        }\n\n        return;\n      }\n    }\n\n    // Select first node if one isn't currently selected\n    updateFocus(elements[0]);\n  };\n\n  /** Handle all keyboard events from tree nodes */\n  const handleKeypress = (event: React.KeyboardEvent, isChild?: boolean) => {\n    const node = event.target as HTMLElement;\n    // Handle open/close toggle\n    if (event.key === \"Enter\" || event.key === \" \") {\n      updateState(!isOpen);\n    }\n\n    if (event.key === \"ArrowRight\" && isOpen && !isChild) {\n      moveFocusAdjacent(node, \"down\");\n    } else if (event.key === \"ArrowRight\") {\n      updateState(true);\n    }\n\n    if (event.key === \"ArrowLeft\" && (!isOpen || isChild)) {\n      moveBack(node);\n    } else if (event.key === \"ArrowLeft\") {\n      updateState(false);\n    }\n\n    if (event.key === \"ArrowDown\") {\n      moveFocusAdjacent(node, \"down\");\n    }\n\n    if (event.key === \"ArrowUp\") {\n      moveFocusAdjacent(node, \"up\");\n    }\n\n    if (event.key === \"Home\") {\n      moveHome(node, \"start\");\n    }\n\n    if (event.key === \"End\") {\n      moveHome(node, \"end\");\n    }\n  };\n\n  /** Set selected and focus states on click events */\n  const handleClick = (event: React.MouseEvent, isChild?: boolean) => {\n    const node = event.target as HTMLElement;\n    const parent = getParent(node, \"treeitem\") as HTMLLIElement;\n\n    // We need to check if another node was selected and move it\n    const elements = getListElements(node) || [];\n    let found = false;\n    for (let i = 0; i < elements.length; i++) {\n      // Go through each <li> and look for the currently selected node\n      const currentNode = elements[i];\n      if (currentNode.getAttribute(\"aria-selected\") === \"true\") {\n        // Move selected to clicked LI\n        if (parent) {\n          found = true;\n          updateFocus(parent, currentNode);\n        }\n\n        break;\n      }\n    }\n\n    // If we didn't find an existing one select the new one\n    if (!found && parent) {\n      updateFocus(parent);\n    }\n\n    // Toggle open state if needed\n    if (!isChild) {\n      updateState(!isOpen);\n    }\n  };\n\n  /** When the tree is blurred make it focusable again */\n  const handleBlur = (event: React.FocusEvent) => {\n    const node = event.currentTarget;\n    if (\n      !node.contains(document.activeElement) &&\n      node.getAttribute(\"role\") === \"tree\"\n    ) {\n      node.setAttribute(\"tabindex\", \"0\");\n    }\n  };\n\n  /** Move focus back to the selected tree node, or focus the first one */\n  const handleFocus = (event: React.FocusEvent) => {\n    const node = event.target;\n    if (node.getAttribute(\"role\") === \"tree\") {\n      const selected = node.querySelector<HTMLLIElement>(\n        '[aria-selected=\"true\"]'\n      );\n\n      if (selected) {\n        // Move to previously selected node\n        updateFocus(selected);\n      } else {\n        // Focus the first node\n        moveFocusAdjacent(node as HTMLElement, \"down\");\n      }\n\n      //\n      node.setAttribute(\"tabindex\", \"-1\");\n    }\n  };\n\n  /** Detect when a button has been focused */\n  const handleButtonFocus = () => {\n    onSelect?.();\n  };\n\n  /** Get the styles for padding based on depth */\n  const getPaddingStyles = (depth: number) => {\n    const space = depth * 0.9 + 0.3;\n    return {\n      paddingLeft: `${space}em`,\n      width: `calc(100% - ${space}em)`,\n    };\n  };\n\n  // The first node needs role \"tree\", while sub-trees need role \"group\"\n  // This is tracked through context to be flexible to elements in the subtree.\n  const { isChild, depth, hasHover } = React.useContext(TreeContext);\n  const showHover = hasHover ? hover : false;\n\n  // Tree root node\n  // Needs to have role tree and one top level UL\n  // https://dequeuniversity.com/library/aria/tabpanels-accordions/sf-tree-view\n  if (!isChild) {\n    return (\n      <ul\n        role=\"tree\"\n        tabIndex={0}\n        className={makeClass(styles.tree, styles.group, themeClass, className)}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        {...html}\n      >\n        <TreeContext.Provider\n          value={{ isChild: true, depth: 0, hasHover: showHover }}\n        >\n          <Tree {...props} />\n        </TreeContext.Provider>\n      </ul>\n    );\n  }\n\n  // Leaf nodes that don't expand, but still highlight and focus.\n  if (!hasChildren) {\n    return (\n      <li role=\"treeitem\" className={styles.item} {...(html as any)}>\n        <div\n          role=\"button\"\n          className={makeClass(styles.label, {\n            [styles.hover]: showHover,\n            [styles.focusWhite]: currentTheme === \"firefox\",\n          })}\n          tabIndex={-1}\n          style={getPaddingStyles(depth)}\n          onKeyDown={(e) => {\n            handleKeypress(e, isChild);\n          }}\n          onClick={(e) => handleClick(e, true)}\n          onFocus={handleButtonFocus}\n        >\n          <span>{label}</span>\n        </div>\n      </li>\n    );\n  }\n\n  // Child tree node with children\n  const arrowClass = makeClass(styles.arrow, { [styles.open]: isOpen });\n  return (\n    <li role=\"treeitem\" aria-expanded={isOpen} className={styles.item}>\n      <div\n        role=\"button\"\n        tabIndex={-1}\n        className={makeClass(styles.label, {\n          [styles.hover]: showHover,\n          [styles.focusWhite]: currentTheme === \"firefox\",\n        })}\n        style={getPaddingStyles(depth)}\n        onClick={(e) => handleClick(e)}\n        onKeyDown={(e) => handleKeypress(e)}\n        onFocus={handleButtonFocus}\n      >\n        <span>\n          <span aria-hidden className={arrowClass} />\n          <span>{label}</span>\n        </span>\n      </div>\n      <ul role=\"group\" className={makeClass(className, styles.group)} {...html}>\n        {isOpen &&\n          React.Children.map(children, (child) => {\n            return (\n              <TreeContext.Provider\n                value={{ isChild: true, depth: depth + 1, hasHover: showHover }}\n              >\n                {child}\n              </TreeContext.Provider>\n            );\n          })}\n      </ul>\n    </li>\n  );\n};\n\nTree.defaultProps = {\n  open: false,\n  hover: true,\n};\n"],"mappings":"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"}
