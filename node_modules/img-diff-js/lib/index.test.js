"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const rimraf_1 = __importDefault(require("rimraf"));
const _1 = require("./");
test("compare with 2 png files", () => __awaiter(void 0, void 0, void 0, function* () {
    const diffFilename = path_1.default.resolve(__dirname, "../test-images/diff_generated.png");
    rimraf_1.default.sync(diffFilename);
    yield _1.imgDiff({
        actualFilename: path_1.default.resolve(__dirname, "../test-images/actual.png"),
        expectedFilename: path_1.default.resolve(__dirname, "../test-images/expected.png"),
    });
    expect(() => fs_1.default.statSync(path_1.default.resolve(__dirname, "../test-images/diff_generated.png"))).toThrowError();
    const { imagesAreSame } = yield _1.imgDiff({
        diffFilename,
        actualFilename: path_1.default.resolve(__dirname, "../test-images/actual.png"),
        expectedFilename: path_1.default.resolve(__dirname, "../test-images/expected.png"),
    });
    expect(imagesAreSame).toBe(false);
    expect(fs_1.default.statSync(path_1.default.resolve(__dirname, "../test-images/diff_generated.png"))).toBeTruthy();
}));
test("compare with 2 same files", () => __awaiter(void 0, void 0, void 0, function* () {
    const { imagesAreSame } = yield _1.imgDiff({
        actualFilename: path_1.default.resolve(__dirname, "../test-images/expected.png"),
        expectedFilename: path_1.default.resolve(__dirname, "../test-images/expected.png"),
    });
    expect(imagesAreSame).toBe(true);
}));
test("compare with 2 files whose dimension are different", () => __awaiter(void 0, void 0, void 0, function* () {
    const diffFilename = path_1.default.resolve(__dirname, "../test-images/diff_generated.wide.png");
    rimraf_1.default.sync(diffFilename);
    yield _1.imgDiff({
        diffFilename,
        actualFilename: path_1.default.resolve(__dirname, "../test-images/actual_wide.png"),
        expectedFilename: path_1.default.resolve(__dirname, "../test-images/expected.png"),
    });
    expect(fs_1.default.statSync(path_1.default.resolve(__dirname, "../test-images/diff_generated.wide.png"))).toBeTruthy();
}));
test("compare with 2 jpeg files", () => __awaiter(void 0, void 0, void 0, function* () {
    const diffFilename = path_1.default.resolve(__dirname, "../test-images/diff_generated.tiff.png");
    rimraf_1.default.sync(diffFilename);
    yield _1.imgDiff({
        diffFilename,
        actualFilename: path_1.default.resolve(__dirname, "../test-images/actual.tiff"),
        expectedFilename: path_1.default.resolve(__dirname, "../test-images/expected.tiff"),
    });
    expect(fs_1.default.statSync(path_1.default.resolve(__dirname, "../test-images/diff_generated.tiff.png"))).toBeTruthy();
}));
test("compare with 2 jpeg files", () => __awaiter(void 0, void 0, void 0, function* () {
    const diffFilename = path_1.default.resolve(__dirname, "../test-images/diff_generated.jpg.png");
    rimraf_1.default.sync(diffFilename);
    yield _1.imgDiff({
        diffFilename,
        actualFilename: path_1.default.resolve(__dirname, "../test-images/actual.jpg"),
        expectedFilename: path_1.default.resolve(__dirname, "../test-images/expected.jpg"),
    });
    expect(fs_1.default.statSync(path_1.default.resolve(__dirname, "../test-images/diff_generated.jpg.png"))).toBeTruthy();
}));
describe("threshold pattern", () => {
    test("no option object", () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield _1.imgDiff({
            actualFilename: path_1.default.resolve(__dirname, "../test-images/actual.png"),
            expectedFilename: path_1.default.resolve(__dirname, "../test-images/expected.png"),
        });
        expect(result.imagesAreSame).toBeFalsy();
    }));
    test("threshold is undefined", () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield _1.imgDiff({
            actualFilename: path_1.default.resolve(__dirname, "../test-images/actual.png"),
            expectedFilename: path_1.default.resolve(__dirname, "../test-images/expected.png"),
            options: {},
        });
        expect(result.imagesAreSame).toBeFalsy();
    }));
    test("set threshold explicitly", () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield _1.imgDiff({
            actualFilename: path_1.default.resolve(__dirname, "../test-images/actual.png"),
            expectedFilename: path_1.default.resolve(__dirname, "../test-images/expected.png"),
            options: {
                threshold: 1.0,
            },
        });
        expect(result.imagesAreSame).toBeTruthy();
    }));
});
//# sourceMappingURL=index.test.js.map