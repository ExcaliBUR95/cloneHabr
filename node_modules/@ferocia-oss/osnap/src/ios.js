"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveToFile = exports.saveScreenshot = exports.checkSimulator = exports.getXcrunPath = void 0;
var which_1 = require("./which");
var errors_1 = require("./errors");
var execa = require("execa");
/**
 * Finds the path to xcrun or throws an error.
 */
function getXcrunPath() {
    return __awaiter(this, void 0, void 0, function () {
        var err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, (0, which_1.which)('xcrun')];
                case 1: return [2 /*return*/, _a.sent()];
                case 2:
                    err_1 = _a.sent();
                    throw (0, errors_1.createError)(errors_1.ErrorCode.MissingXcrun);
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.getXcrunPath = getXcrunPath;
/**
 * Checks to see if a simulator is booted and ready to ask for a screen shot.
 *
 * @param xcrunPath The path to xcrun
 */
function checkSimulator(xcrunPath, device) {
    return __awaiter(this, void 0, void 0, function () {
        var response, stdout, devices;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, execa(xcrunPath, ['simctl', 'list', 'devices'])];
                case 1:
                    response = _a.sent();
                    stdout = response.stdout;
                    devices = stdout.split('\n').filter(function (line) { return line.includes('(Booted)'); }).map(function (line) { return line.replace(/.+\(([A-F0-9\-]+)\).+/, '$1'); });
                    // not enough devices?
                    if (devices.length === 0) {
                        throw (0, errors_1.createError)(errors_1.ErrorCode.NoRunningiOSSimulators);
                    }
                    // only 1 and no preference?  just pick that.
                    if (devices.length === 1 && !device) {
                        return [2 /*return*/, devices[0]];
                    }
                    // too many devices?
                    if (devices.length > 1 && !device) {
                        throw (0, errors_1.createError)(errors_1.ErrorCode.AmbiguousiOSSimulator);
                    }
                    // can't find what the user is looking for?
                    if (devices.indexOf(device) < 0) {
                        throw (0, errors_1.createError)(errors_1.ErrorCode.MissingiOSSimulator);
                    }
                    return [2 /*return*/, device || 'booted'];
            }
        });
    });
}
exports.checkSimulator = checkSimulator;
/**
 * Takes a screenshot of the current running simulator and saves it to a file.
 *
 * @param xcrunPath The path to xcrun
 * @param filename The filename to save
 */
function saveScreenshot(xcrunPath, device, filename) {
    return __awaiter(this, void 0, void 0, function () {
        var response, err_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, execa(xcrunPath, ['simctl', 'io', device, 'screenshot', filename])];
                case 1:
                    response = _a.sent();
                    if (response.code !== 0) {
                        throw (0, errors_1.createError)(errors_1.ErrorCode.ScreenshotFail);
                    }
                    return [3 /*break*/, 3];
                case 2:
                    err_2 = _a.sent();
                    throw (0, errors_1.createError)(errors_1.ErrorCode.ScreenshotFail);
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.saveScreenshot = saveScreenshot;
/**
 * Runs the iOS snapshot.
 *
 * @param parameters The CLI parameters
 */
function saveToFile(parameters) {
    return __awaiter(this, void 0, void 0, function () {
        var xcrun, device;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getXcrunPath()];
                case 1:
                    xcrun = _a.sent();
                    return [4 /*yield*/, checkSimulator(xcrun, parameters.device)];
                case 2:
                    device = _a.sent();
                    return [4 /*yield*/, saveScreenshot(xcrun, device, parameters.filename)];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.saveToFile = saveToFile;
